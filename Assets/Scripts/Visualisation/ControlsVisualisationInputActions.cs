//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.12.0
//     from Assets/Scripts/Visualisation/ControlsVisualisationInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BeardedPlatypus.Visualisation
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/Visualisation/ControlsVisualisationInputActions.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @ControlsVisualisationInputActions: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @ControlsVisualisationInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsVisualisationInputActions"",
    ""maps"": [
        {
            ""name"": ""ControlsVisualisation"",
            ""id"": ""d19aaf30-b3d9-4e09-a7f8-02951200bfe6"",
            ""actions"": [
                {
                    ""name"": ""LeftMouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8348a641-01a3-45a1-893e-029943ccce2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""89c07f4b-39d5-4433-85c3-ea3fb98a3185"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleMouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f98ef1a9-f515-4d46-89bf-a8a7cecdca27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CtrlButton"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f13acd2b-c034-4f22-991e-06721a79e1dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21f1a61d-a190-43e2-8c0a-5d4bc5291097"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76bfb792-544f-408d-98e0-37b2bba8f151"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2f9021c-e2d6-4b86-a750-8436c3bd1f88"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ecc7d29-5621-4d0f-a94e-6a1d0e49a5f3"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CtrlButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ControlsVisualisation
            m_ControlsVisualisation = asset.FindActionMap("ControlsVisualisation", throwIfNotFound: true);
            m_ControlsVisualisation_LeftMouse = m_ControlsVisualisation.FindAction("LeftMouse", throwIfNotFound: true);
            m_ControlsVisualisation_RightMouse = m_ControlsVisualisation.FindAction("RightMouse", throwIfNotFound: true);
            m_ControlsVisualisation_MiddleMouse = m_ControlsVisualisation.FindAction("MiddleMouse", throwIfNotFound: true);
            m_ControlsVisualisation_CtrlButton = m_ControlsVisualisation.FindAction("CtrlButton", throwIfNotFound: true);
        }

        ~@ControlsVisualisationInputActions()
        {
            UnityEngine.Debug.Assert(!m_ControlsVisualisation.enabled, "This will cause a leak and performance issues, ControlsVisualisationInputActions.ControlsVisualisation.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ControlsVisualisation
        private readonly InputActionMap m_ControlsVisualisation;
        private List<IControlsVisualisationActions> m_ControlsVisualisationActionsCallbackInterfaces = new List<IControlsVisualisationActions>();
        private readonly InputAction m_ControlsVisualisation_LeftMouse;
        private readonly InputAction m_ControlsVisualisation_RightMouse;
        private readonly InputAction m_ControlsVisualisation_MiddleMouse;
        private readonly InputAction m_ControlsVisualisation_CtrlButton;
        /// <summary>
        /// Provides access to input actions defined in input action map "ControlsVisualisation".
        /// </summary>
        public struct ControlsVisualisationActions
        {
            private @ControlsVisualisationInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public ControlsVisualisationActions(@ControlsVisualisationInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "ControlsVisualisation/LeftMouse".
            /// </summary>
            public InputAction @LeftMouse => m_Wrapper.m_ControlsVisualisation_LeftMouse;
            /// <summary>
            /// Provides access to the underlying input action "ControlsVisualisation/RightMouse".
            /// </summary>
            public InputAction @RightMouse => m_Wrapper.m_ControlsVisualisation_RightMouse;
            /// <summary>
            /// Provides access to the underlying input action "ControlsVisualisation/MiddleMouse".
            /// </summary>
            public InputAction @MiddleMouse => m_Wrapper.m_ControlsVisualisation_MiddleMouse;
            /// <summary>
            /// Provides access to the underlying input action "ControlsVisualisation/CtrlButton".
            /// </summary>
            public InputAction @CtrlButton => m_Wrapper.m_ControlsVisualisation_CtrlButton;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_ControlsVisualisation; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="ControlsVisualisationActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(ControlsVisualisationActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="ControlsVisualisationActions" />
            public void AddCallbacks(IControlsVisualisationActions instance)
            {
                if (instance == null || m_Wrapper.m_ControlsVisualisationActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ControlsVisualisationActionsCallbackInterfaces.Add(instance);
                @LeftMouse.started += instance.OnLeftMouse;
                @LeftMouse.performed += instance.OnLeftMouse;
                @LeftMouse.canceled += instance.OnLeftMouse;
                @RightMouse.started += instance.OnRightMouse;
                @RightMouse.performed += instance.OnRightMouse;
                @RightMouse.canceled += instance.OnRightMouse;
                @MiddleMouse.started += instance.OnMiddleMouse;
                @MiddleMouse.performed += instance.OnMiddleMouse;
                @MiddleMouse.canceled += instance.OnMiddleMouse;
                @CtrlButton.started += instance.OnCtrlButton;
                @CtrlButton.performed += instance.OnCtrlButton;
                @CtrlButton.canceled += instance.OnCtrlButton;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="ControlsVisualisationActions" />
            private void UnregisterCallbacks(IControlsVisualisationActions instance)
            {
                @LeftMouse.started -= instance.OnLeftMouse;
                @LeftMouse.performed -= instance.OnLeftMouse;
                @LeftMouse.canceled -= instance.OnLeftMouse;
                @RightMouse.started -= instance.OnRightMouse;
                @RightMouse.performed -= instance.OnRightMouse;
                @RightMouse.canceled -= instance.OnRightMouse;
                @MiddleMouse.started -= instance.OnMiddleMouse;
                @MiddleMouse.performed -= instance.OnMiddleMouse;
                @MiddleMouse.canceled -= instance.OnMiddleMouse;
                @CtrlButton.started -= instance.OnCtrlButton;
                @CtrlButton.performed -= instance.OnCtrlButton;
                @CtrlButton.canceled -= instance.OnCtrlButton;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ControlsVisualisationActions.UnregisterCallbacks(IControlsVisualisationActions)" />.
            /// </summary>
            /// <seealso cref="ControlsVisualisationActions.UnregisterCallbacks(IControlsVisualisationActions)" />
            public void RemoveCallbacks(IControlsVisualisationActions instance)
            {
                if (m_Wrapper.m_ControlsVisualisationActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="ControlsVisualisationActions.AddCallbacks(IControlsVisualisationActions)" />
            /// <seealso cref="ControlsVisualisationActions.RemoveCallbacks(IControlsVisualisationActions)" />
            /// <seealso cref="ControlsVisualisationActions.UnregisterCallbacks(IControlsVisualisationActions)" />
            public void SetCallbacks(IControlsVisualisationActions instance)
            {
                foreach (var item in m_Wrapper.m_ControlsVisualisationActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ControlsVisualisationActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="ControlsVisualisationActions" /> instance referencing this action map.
        /// </summary>
        public ControlsVisualisationActions @ControlsVisualisation => new ControlsVisualisationActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "ControlsVisualisation" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="ControlsVisualisationActions.AddCallbacks(IControlsVisualisationActions)" />
        /// <seealso cref="ControlsVisualisationActions.RemoveCallbacks(IControlsVisualisationActions)" />
        public interface IControlsVisualisationActions
        {
            /// <summary>
            /// Method invoked when associated input action "LeftMouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnLeftMouse(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "RightMouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRightMouse(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "MiddleMouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMiddleMouse(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "CtrlButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnCtrlButton(InputAction.CallbackContext context);
        }
    }
}
